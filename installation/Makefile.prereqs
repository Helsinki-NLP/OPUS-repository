# -*-makefile-*-

INSTALL = sudo install -c
INSTALL_BIN = ${INSTALL} -m 755
INSTALL_DATA = ${INSTALL} -m 644
COPY = cp -r --preserve=mode,timestamps

APTGET = apt-get
PIP    = pip3
FORCE  = false
## if you want to force-install all packages:
## uncomment the following lines instead of the ones above
# APTGET = apt-get --force-yes
# FORCE  = true

## a newer version of git
## --> faster than the standard version
GITVERSION = 2.21.0

UBUNTU_BASE_PACKAGES = \
		apache2 \
		autoconf \
		automake \
		build-essential \
		bzip2 \
		cmake \
		cpanminus \
		curl \
		cython3 \
		default-jre \
		default-jdk \
		dos2unix \
		g++ \
		gettext \
		git \
		graphviz \
		gzip \
		libalgorithm-diff-perl \
		libapache2-mod-perl2 \
		libapache2-reload-perl \
		libapache2-request-perl \
		libbz2-dev \
		libclass-inspector-perl \
		libcrypt-ssleay-perl \
		libcurl4-openssl-dev \
		libdevel-nytprof-perl \
		libdbi-perl \
		libdigest-md5-file-perl \
		libdrmaa1.0-java \
		libfile-bom-perl \
		libfile-copy-recursive-perl \
		libfile-slurp-perl \
		libfuse-dev \
		libhook-lexwrap-perl \
		libinline-perl \
		libipc-run-perl \
		liblog-dispatch-perl \
		liblog-log4perl-perl \
		libmodule-install-perl \
		libmagic-dev \
		libmime-lite-perl \
		libparams-util-perl \
		libppi-perl \
		libpython3-dev \
		libregexp-common-perl \
		libssl-dev \
		libstring-approx-perl \
		libsvg-perl \
		libsub-uplevel-perl \
		libtest-differences-perl \
		libtest-nowarnings-perl \
		libtest-object-perl \
		libtest-requires-perl \
		libtest-subcalls-perl \
		libtest-simple-perl \
		libtest-warn-perl \
		libtika-java \
		libtool \
		liburi-query-perl \
		libvariable-magic-perl \
		libxml-libxml-perl \
		libxml-perl \
		libxml-simple-perl \
		libxml-writer-perl \
		libxml2-utils \
		libyaml-perl \
		liblzma-dev \
		liblzo2-dev \
		lzma-dev \
		openjdk-8-jdk \
		openjdk-14-jdk \
		openssl \
		perl-doc \
		php \
		pkg-config \
		python \
		python-pip-whl \
		python3 \
		python3-numpy \
		python3-pip \
		python3-setuptools \
		sendmail \
		subversion \
		tidy \
		unzip \
		wget \
		xinetd \
		xpdf-utils \
		zip


MYSQL_UBUNTU_PACKAGES = mysql-server mysql-client libdbd-mysql-perl

MOJO_UBUNTU_PACKAGES = ${MYSQL_UBUNTU_PACKAGES} libgd2-xpm-dev


CPAN_MODULES = 	Apache::Tika \
		Archive::Zip \
		Class::Sniff \
		Encode::Locale \
		File::Find::utf8 \
		File::GetLineMaxLength \
		File::LibMagic \
		File::Spec \
		File::Touch \
		Lingua::Sentence \
		Lingua::Identify \
		LWP::Protocol::Net::Curl \
		LWP::Simple \
		Module::Install \
		Persistent::Base \
		Persistent::DBI \
		Test::More \
		Text::PDF2XML \
		Switch \
		Ufal::UDPipe \
		URI::Escape::XS \
		URL::Encode \
		URL::Encode::XS


#		Mojo::UserAgent \
#		Net::SSL


## apt-get package exists
#		Digest::MD5::File \

#		Inline::Python    # not needed anymore (does not work with mod_perl)
#		String::Approx    # installed via libstring-approx-perl


# TODO: do we still need the Persistent modules?


MOJO_CPAN_MODULES = Authen::Captcha \
		Mojolicious \
		Mojolicious::Plugin::Authentication \
		DBIx::Simple \
		SQL::Abstract \
		DBIx::DataSource \
		Devel::Size \
		Encode::Escape::Unicode


## some CPAN modules that fail to install
## TODO: fix modules if possible
FORCECPAN_MODULES = 	Filesys::DiskUsage \
			Text::SRT::Align

#			Uplug
#			Lingua::Identify::Blacklists \


MYSQL_FORCECPAN_MODULES = Persistent::MySQL


# Tokyo Cabinet & Tokyo Tyrant (are included in lib/)

TOKYOCABINET      = tokyocabinet-1.4.47
TOKYOCABINET_PERL = tokyocabinet-perl-1.34
TOKYOTYRANT       = tokyotyrant-1.1.41
TOKYOTYRANT_PERL  = tokyotyrant-perl-1.16


# other third-party software
#   hunalign ... sentence aligner
#   chared ..... character encoding detection

HUNALIGN     = hunalign-1.1
CHARED       = chared-1.2
OPENNLP      = apache-opennlp-1.5.2-incubating
FUSECOMPRESS = https://github.com/hexxellor/fusecompress.git
EFLOMAL      = https://github.com/robertostling/eflomal.git
FAST_ALIGN   = https://github.com/clab/fast_align.git

# just in case they are installed: remove the old TokyoCabinet packages

# OLD_TOKYO_PACKAGES = libtokyocabinet-dbg libtokyocabinet-dev libtokyocabinet9 \
#		python-pytyrant tokyocabinet-bin tokyocabinet-doc

OLD_TOKYO_PACKAGES = libtokyocabinet-dev libtokyocabinet9 tokyocabinet-bin tokyocabinet-doc


# prerequesites on a server machine (do the same for storage-server & rr-server)
.PHONY: install-storage-server install-rr-server install-client install
install-storage-server install-rr-server install: \
    update-apt-repository install-swap server-software install-perlmodules

# prerequesites on a frontend machine
# TODO: do we need all this on a frontend machine?
.PHONY: install-frontend
install-frontend: install-swap frontend-software install-perlmodules 


# prerequesites on a sge exec host
.PHONY: install-sge-client install-client
install-client install-sge-client: \
	update-apt-repository install-swap client-software install-perlmodules


# modules for mojolicious webinterface
.PHONY: install-grenzschnitte
install-grenzschnitte:
	$(APTGET) -qq install ${MOJO_UBUNTU_PACKAGES}
	${MAKE} -f Makefile.prereqs \
		CPAN_MODULES="${MOJO_CPAN_MODULES}" install-perlmodules


.PHONY: install-perlmodules
install-perlmodules: prepare-cpan
	for cpanmod in ${CPAN_MODULES}; do \
		! ( ${FORCE} || ! perl -e "use $$cpanmod" 2>/dev/null ) || \
		( (	cpanm $$cpanmod && \
			perl -e "use $$cpanmod" 2>/dev/null ) || \
			{ echo "*** cpan $$cpanmod" >&2 ; exit 1 ; } ) \
	done
	for cpanmod in ${FORCECPAN_MODULES}; do \
		! ( ${FORCE} || ! perl -e "use $$cpanmod" 2>/dev/null ) || \
		( (	cpanm -f $$cpanmod && \
			perl -e "use $$cpanmod" 2>/dev/null ) || \
			{ echo "*** cpan $$cpanmod" >&2 ; exit 1 ; } ) \
	done
	if [ "$(PERMISSION_DBMS)" = "mysql" ]; then \
	    for cpanmod in ${MYSQL_FORCECPAN_MODULES}; do \
		! ( ${FORCE} || ! perl -e "use $$cpanmod" 2>/dev/null ) || \
		( (	cpanm -f $$cpanmod && \
			perl -e "use $$cpanmod" 2>/dev/null ) || \
			{ echo "*** cpan $$cpanmod" >&2 ; exit 1 ; } ) \
	    done \
	fi

## also special: Inline::Java requires JAVA_HOME

## TODO: do we need openjdk 7?
##
#	$(APTGET) -qq install openjdk-7-jdk
	cpanm Inline
	JAVA_HOME=/usr/lib/jvm/default-java cpanm Inline::Java


## don't do this anymore ...
#
# ## remove IO::Socket::SSL (does not seem to work - we use Net::SSL)

# 	while M=$$(perl -e 'use IO::Socket::SSL; print $$INC{"IO/Socket/SSL.pm"}' 2>/dev/null); \
# 		[ -n "$$M" ]; \
# 	do \
# 		echo "*** Removing IO::Socket::SSL from path $${M%IO/Socket/SSL.pm}"; \
# 		mv $$M $$M~; \
# 	done

# ## Again ... for some strange reason Net::SSL often doesn't install properly at first!

# 	cpanm Net::SSL



## ......... doesn't work with mod_perl ..........
## install Inline::Python with support for python3 and not python2.7
#
#	update-alternatives --install /usr/bin/python python /usr/bin/python3 10
#	cpanm Inline::Python
#	update-alternatives --install /usr/bin/python python /usr/bin/python2.7 20




.PHONY: prepare-cpan
prepare-cpan:
	$(MAKE) PREFIX=${PREFIX} config-cpan || exit 1
	cpan -i App::cpanminus


## install server ubuntu packages (run as sudo!)
## (add LETSMTHOST as alias for localhost in /etc/hosts/ --> for SGE setup!)

.PHONY: server-software
server-software: \
	software-base \
	software-mysql \
	${BATCHQUEUE_SERVER_TARGETS} \
	software-tokyocabinet \
	software-tokyotyrant \
	software-git \
	/var/www/.gitconfig \
	software-hunalign \
	software-chared \
	software-opennlp \
	software-udpipe \
	software-eflomal \
	software-fastalign \
	software-langid \
	software-uplug


## fusecompress does not compile and
## git is already newer than we need
#	software-fusecompress
#	software-git


## software required by the sge-clients
.PHONY: sge-client-software client-software
client-software sge-client-software: \
	software-base \
	${BATCHQUEUE_CLIENT_TARGETS} \
	software-tokyocabinet \
	software-tokyotyrant \
	software-hunalign \
	software-chared \
	software-opennlp \
	software-udpipe \
	software-eflomal \
	software-fastalign \
	software-langid


## software required on a frontend
# Tokyo*: Not at all optimal. In the long run it will be better to remove
# the relevant dependencies in WebService.
.PHONY: frontend-software
frontend-software: software-base \
	software-tokyocabinet \
	software-tokyotyrant \
	software-hunalign \
	software-chared


.PHONY: update-apt-repository
update-apt-repository:
#	add-apt-repository "deb http://archive.canonical.com/ lucid partner"
	$(APTGET) update

.PHONY: software-base
software-base:
	$(APTGET) -qq install ${UBUNTU_BASE_PACKAGES}

.PHONY: software-mysql
software-mysql:
	if [ "$(PERMISSION_DBMS)" = "mysql" ]; then \
		$(APTGET) install ${MYSQL_UBUNTU_PACKAGES}; \
	fi

.PHONY: software-sge-master
software-sge-master:
	$(APTGET) -qq install gridengine-master

.PHONY: software-sge-client
software-sge-client:
	$(APTGET) -qq install gridengine-client

.PHONY: software-sge-exec
software-sge-exec:
	$(APTGET) -qq install gridengine-exec



#########################################################################
# add a swapfile for more flexibility in memory allocation
# (https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04)

.PHONY: install-swap
install-swap: /swapfile
/swapfile:
	fallocate -l 8G /swapfile
	chmod 600 /swapfile
	mkswap /swapfile
	swapon /swapfile
	grep -v '/swapfile' /etc/fstab > fstab.tmp
	echo '/swapfile   none    swap    sw    0   0' >> fstab.tmp
	${INSTALL_DATA} -b -S .old fstab.tmp /etc/fstab
	rm -f fstab.tmp



## install SLURM and SLURM configuration

.PHONY: software-slurm
software-slurm: /etc/munge/munge.key
	$(APTGET) -qq install slurmd slurm-client slurmctld
#	$(APTGET) -qq install slurm-llnl

# .PHONY: software-slurm
# software-slurm: /etc/munge/munge.key \
# 		/etc/slurm-llnl/slurm.conf \
# 		/etc/slurm-llnl/cgroup.conf
# 	$(APTGET) -qq install slurm-llnl
# 	service slurm-llnl start

/etc/munge/munge.key:
	mkdir -p ${dir $@}
	$(APTGET) -qq install munge
	/usr/sbin/create-munge-key
	service munge start

# /etc/slurm-llnl/cgroup.conf: cgroup.conf
# 	mkdir -p ${dir $@}
# 	${INSTALL_DATA} $< $@

# /etc/slurm-llnl/slurm.conf: slurm.conf
# 	mkdir -p ${dir $@}
# 	sed -e "s#REPLACE_SLURM_SERVER#${SLURM_SERVER}#" \
# 	    -e "s#REPLACE_SLURM_NODES#${SLURM_NODES}#" \
# 	< $< > $@



.PHONY: software-tokyocabinet
software-tokyocabinet:
	$(APTGET) -qq purge ${OLD_TOKYO_PACKAGES}
	! ( ${FORCE} || ! which tctmgr ) || \
	(	cd ../lib; \
		tar -zxf ${TOKYOCABINET}.tar.gz; \
		cd ${TOKYOCABINET}; \
		./configure; \
		make; \
		sudo make install; )
	! ( ${FORCE} || ! perl -e 'use TokyoCabinet;' 2>/dev/null ) || \
	(	cd ../lib; \
		tar -zxf ${TOKYOCABINET_PERL}.tar.gz; \
		cd ${TOKYOCABINET_PERL}; \
		perl Makefile.PL; \
		make; \
		sudo make install; )


.PHONY: software-tokyotyrant
software-tokyotyrant: software-tokyocabinet
	! ( ${FORCE} || ! which ttserver ) || \
	(	cd ../lib; \
		tar -zxf ${TOKYOTYRANT}.tar.gz; \
		cd ${TOKYOTYRANT}; \
		./configure; \
		make; \
		sudo make install; )
	! ( ${FORCE} || ! perl -e 'use TokyoTyrant;' 2>/dev/null ) || \
	(	cd ../lib; \
		tar -zxf ${TOKYOTYRANT_PERL}.tar.gz; \
		cd ${TOKYOTYRANT_PERL}; \
		perl Makefile.PL; \
		make; \
		sudo make install; )


.PHONY: software-hunalign
software-hunalign:
	! ( ${FORCE} || ! which hunalign ) || \
	(	cd ../lib; \
		tar -zxf ${HUNALIGN}.tgz; \
		cd ${HUNALIGN}/src/hunalign; \
		make CC=g++; \
		${INSTALL_BIN} hunalign ${PREFIX}/bin/hunalign; )


.PHONY: software-chared
software-chared:
	! ( ${FORCE} || ! which chared ) || \
	(	cd ../lib; \
		tar -zxf ${CHARED}.tar.gz; \
		cd ${CHARED}; \
		python setup.py install; )


.PHONY: software-opennlp
software-opennlp:
	(	cd ../lib; \
		tar -zxf ${OPENNLP}-bin.tar.gz; \
		cd ${OPENNLP}; \
		${INSTALL_BIN} bin/opennlp ${PREFIX}/bin/opennlp; \
		${INSTALL_BIN} lib/*.jar ${PREFIX}/lib; )

.PHONY: software-git
software-git: /usr/local/bin/git

/usr/local/bin/git:
	wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-${GITVERSION}.tar.gz
	tar -xzf git-${GITVERSION}.tar.gz
	( cd git-${GITVERSION} && ./configure --with-curl )
	make -C git-${GITVERSION} all
	make -C git-${GITVERSION} install
	rm -f git-${GITVERSION}.tar.gz
	rm -fr git-${GITVERSION}
	$@ config --global core.commitGraph true
	$@ config --global gc.writeCommitGraph true

/var/www/.gitconfig:
	git config --global core.commitGraph true
	git config --global gc.writeCommitGraph true
	echo '[user]'                                     >> /var/www/.gitconfig
        echo '       email = ${LETSMTUSER}@${LETSMTHOST}' >> /var/www/.gitconfig
        echo '       name = ${LETSMTUSER}'                >> /var/www/.gitconfig


.PHONY: software-udpipe
software-udpipe: ${PREFIX}/share/UDPipe

${PREFIX}/share/UDPipe:
	wget -O udpipe-ud-2.0-170801.zip \
	https://lindat.mff.cuni.cz/repository/xmlui/bitstream/handle/11234/1-2364/udpipe-ud-2.0-170801.zip
	mkdir -p ${PREFIX}/share/UDPipe
	unzip udpipe-ud-2.0-170801.zip
	${INSTALL_DATA} udpipe-ud-2.0-170801/* ${LETSMTROOT}/share/UDPipe/
	rm -fr udpipe-ud-2.0-170801
	rm -f udpipe-ud-2.0-170801.zip

.PHONY: software-udpipe
software-uplug:
	! ( ${FORCE} || ! which uplug ) || \
	( git clone https://github.com/Helsinki-NLP/Uplug.git; \
	  make -C Uplug install; )

.PHONY: software-fusecompress
software-fusecompress:
	! ( ${FORCE} || ! which fusecompress ) || \
	( git clone ${FUSECOMPRESS}; \
	  cd fusecompress; \
	  ./autogen.sh; \
	  ./configure; \
	  make install; )
	sed -i "s/#user_allow_other/user_allow_other/" /etc/fuse.conf


.PHONY: software-eflomal
software-eflomal:
	! ( ${FORCE} || ! which eflomal ) || \
	(	rm -fr eflomal; \
		git clone ${EFLOMAL}; \
		cd eflomal && git checkout priors; \
		make install; \
		python3 setup.py install; \
		${INSTALL_BIN} align.py ${PREFIX}/bin/eflomal.py; \
		mkdir -p ${PREFIX}/share; cd ..;\
		${COPY} eflomal ${PREFIX}/share/; )

.PHONY: software-fastalign
software-fastalign:
	! ( ${FORCE} || ! which eflomal ) || \
	(	rm -fr fast_align; \
		git clone ${FAST_ALIGN}; \
		mkdir -p fast_align/build; \
		cd fast_align/build && cmake ..; \
		make -C fast_align/build; \
		${INSTALL_BIN} fast_align/build/atools ${PREFIX}/bin/atools; \
		${INSTALL_BIN} fast_align/build/fast_align ${PREFIX}/bin/fast_align; )

.PHONY: software-langid
software-langid:
	${PIP} install langid
	${PIP} install pycld2


# modules necessary for Grid::Request (not used yet)
####################################################################
# installing grid::request directly from cpan fails!
# --> need to install DRMAAc & Grid::Request by hand
#
# !!!! this assumes that libdrmaa-dev is installed and  !!!!!!
# !!!! drmaa.h is in /usr/include/drmaa.h               !!!!!!
# !!!! this also assumes that SGE_ROOT is /var/lib/gridengine
#
# TODO: make this more general
####################################################################

CPAN = http://search.cpan.org/CPAN
DRMAAc_VERSION = 0.81
DRMAAc_SRC = Schedule-DRMAAc-${DRMAAc_VERSION}
DRMAAc_TAR = ${DRMAAc_SRC}.tar.gz
DRMAAc_URL = ${CPAN}/authors/id/T/TH/THARSCH/${DRMAAc_TAR}

.PHONY: software-gridrequest
software-gridrequest: ${HOME}/.grid_request.conf
	-cpan -i Grid::Request
	! ( ${FORCE} || ! perl -e 'use Schedule::DRMAAc;' 2>/dev/null ) || \
	(	cd /tmp && \
		wget '${DRMAAc_URL}' && \
		tar -zxf ${DRMAAc_TAR} && \
		cd ${DRMAAc_SRC} && \
		ln -s /usr/include/drmaa.h . && \
		export SGE_ROOT=/var/lib/gridengine && \
		perl Makefile.PL PREFIX=/usr/local && \
		make && \
		make install; \
		rm -f /tmp/${DRMAAc_TAR}; \
		rm -fr /tmp/${DRMAAc_SRC}; )
	! ( ${FORCE} || ! perl -e "use Grid::Request;" 2>/dev/null ) || \
		cpan -fi Grid::Request


# a simplified grid conf file for Grid::Request ....

${HOME}/.grid_request.conf:
	echo '[request]' > $@
	echo 'drm=SGE' >> $@
	echo 'tempdir=/tmp' >> $@

#########################################################################
## cleaning up

.PHONY: distclean
distclean: clean
	rm -rf ../lib/${TOKYOCABINET}/
	rm -rf ../lib/${TOKYOCABINET_PERL}/
	rm -rf ../lib/${TOKYOTYRANT}/
	rm -rf ../lib/${TOKYOTYRANT_PERL}/
	rm -rf ../lib/${HUNALIGN}/
	rm -rf ../lib/${CHARED}/
	rm -rf ../lib/${OPENNLP}/

.PHONY: clean
clean:
	rm -fr fusecompress
